{
    "docs": [
        {
            "location": "/",
            "text": "Persian Web Toolkit\n\u00b6\n\n\nSome Ui Tools Compatible With Persian Layout And Jalali Calendar\n\n\nPersian Web Toolkit is freely distributable under the terms of the WTFPL license.\n\n\nPersian Date\n\u00b6\n\n\nDownload\n\n\nFollow @babakhani\n\n\nStar\n\n\nIssue\n\n\nWatch\n\n\nFork\n\n\n\n\n\n\n\n\njavascript date library for parsing, validating, manipulating, and formatting persian dates System.\n\n\nPersian Date/Time Picker\n\u00b6\n\n\nDownload\n\n\nFollow @babakhani\n\n\nWatch\n\n\nStar\n\n\nFork\n\n\nIssue\n\n\n\n\n\n\n\n\njQuery datepicker plugin work with Iranian calendar.\n\n\nPersian Heat chart\n\u00b6\n\n\n\n\njavascript date library for parsing, validating, manipulating, and formatting persian dates System.",
            "title": "Home"
        },
        {
            "location": "/#persian-web-toolkit",
            "text": "Some Ui Tools Compatible With Persian Layout And Jalali Calendar  Persian Web Toolkit is freely distributable under the terms of the WTFPL license.",
            "title": "Persian Web Toolkit"
        },
        {
            "location": "/#persian-date",
            "text": "Download  Follow @babakhani  Star  Issue  Watch  Fork     javascript date library for parsing, validating, manipulating, and formatting persian dates System.",
            "title": "Persian Date"
        },
        {
            "location": "/#persian-datetime-picker",
            "text": "Download  Follow @babakhani  Watch  Star  Fork  Issue     jQuery datepicker plugin work with Iranian calendar.",
            "title": "Persian Date/Time Picker"
        },
        {
            "location": "/#persian-heat-chart",
            "text": "javascript date library for parsing, validating, manipulating, and formatting persian dates System.",
            "title": "Persian Heat chart"
        },
        {
            "location": "/datepicker/",
            "text": "Persian Date Picker\n\u00b6\n\n\n\n\n\n\nPersian Date Picker\nThis Date picker work with Iranian calendar.\n\n\nJalali calendar datepicker, which depends on https://github.com/babakhani/PersianDate\n\n\nMore info at \nWikipedia\n\n\n\n\nDocuments\n\n\nDemo\n\n\n\n\nTable of content:\n\u00b6\n\n\n\n\nDependency\n\n\nInstall\n\n\nUsage\n\n\nOptions\n\n\n\n\nDependency\n\u00b6\n\n\n\n\npersian date\n\n\n\n\nInstall\n\u00b6\n\n\nnpm install persian-datepicker\nbower install persian-datepicker\n\n\n\n\n\nUsage\n\u00b6\n\n\n<\nhead\n>\n\n  \n<\nlink\n \nrel\n=\n\"stylesheet\"\n \nhref\n=\n\"css/persian.datepicker.css\"\n/>\n\n  \n<\nscript\n \nsrc\n=\n\"js/jquery.js\"\n></\nscript\n>\n\n  \n<\nscript\n \nsrc\n=\n\"js/persian.date.js\"\n></\nscript\n>\n\n  \n<\nscript\n \nsrc\n=\n\"js/persian.datepicker.js\"\n></\nscript\n>\n\n\n</\nhead\n>\n\n\n\n<\nscript\n \ntype\n=\n\"text/javascript\"\n>\n\n  \n$\n(\ndocument\n).\nready\n(\nfunction\n()\n \n{\n\n  \n$\n(\n\".example1\"\n).\npDatepicker\n();\n\n  \n});\n\n\n</\nscript\n>\n\n\n\n<\ninput\n \ntype\n=\n\"text\"\n \nclass\n=\n\"example1\"\n \n/>\n\n\n\n\n\n\noptions\n\u00b6\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ninitialValue\n\n\nboolean\n\n\ntrue\n\n\nIf set true datepicker init with input value date\n\n\n\n\n\n\npersianDigit\n\n\nboolean\n\n\ntrue\n\n\nIf true all digit shows as persian digit\n\n\n\n\n\n\nviewMode\n\n\nstring\n\n\n'day'\n\n\nAccept day, motnh, year\n\n\n\n\n\n\nformat\n\n\nstring\n\n\n'LLLL'\n\n\nDefault input value formatt string.\n\n\n\n\n\n\nformatter\n\n\nfunction\n\n\nfunction(unixDate){return unixDate}\n\n\nFormat value of input\n\n\n\n\n\n\naltField\n\n\nselector\n\n\nfalse\n\n\nFormat value of alt field input\n\n\n\n\n\n\naltFieldFormatter\n\n\nselector\n\n\nfunction(unixDate){return unixDate}\n\n\nFormat value of input\n\n\n\n\n\n\nminDate\n\n\nunixDate\n\n\nnull\n\n\nFormat value of input\n\n\n\n\n\n\nmaxDate\n\n\nunixDate\n\n\nnull\n\n\nFormat value of input\n\n\n\n\n\n\nnavigator\n\n\nobject\n\n\n\n\nNavigator object options\n\n\n\n\n\n\nnavigator.enabled\n\n\nboolean\n\n\ntrue\n\n\nMake enable/disable navigator\n\n\n\n\n\n\nnavigator.text\n\n\nobject\n\n\ntrue\n\n\n\n\n\n\n\n\nnavigator.text.btnNextText\n\n\nstring\n\n\n'<'\n\n\n\n\n\n\n\n\nnavigator.text.btnPrevText\n\n\nstring\n\n\n'>'\n\n\n\n\n\n\n\n\nnavigator.text.onNext\n\n\nevent\n\n\nfunction (navigator) {}\n\n\nCalled when navigator goes to next state\n\n\n\n\n\n\nnavigator.text.onPrev\n\n\nevent\n\n\nfunction (navigator) {}\n\n\nCalled when navigator goes to prev state\n\n\n\n\n\n\nnavigator.text.onSwitch\n\n\nevent\n\n\nfunction (state) {}\n\n\nCalled when navigator switch\n\n\n\n\n\n\ntoolbox\n\n\nobject\n\n\n\n\nToolbox object options.\n\n\n\n\n\n\ntoolbox.enabled\n\n\nboolean\n\n\ntrue\n\n\nEnable/Disable toolbox object\n\n\n\n\n\n\ntoolbox.text\n\n\nobject\n\n\n\n\n\n\n\n\n\n\ntoolbox.text.btnToday\n\n\nstring\n\n\n'\u0627\u0645\u0631\u0648\u0632'\n\n\nToday button text\n\n\n\n\n\n\ntoolbox.onToday\n\n\nevent\n\n\nfunction(toolbox){return unixDate}\n\n\nEvent called when today btn clicked\n\n\n\n\n\n\nonlyTimePicker (mode)\n\n\nboolean\n\n\nfalse\n\n\nMust change\n\n\n\n\n\n\nonlySelectOnDate\n\n\nboolean\n\n\ntrue\n\n\nMust change\n\n\n\n\n\n\ncheckDate\n\n\nfunction\n\n\nfunction (unix)  { return true; }\n\n\nValidate date access before render\n\n\n\n\n\n\ncheckMonth\n\n\nfunction\n\n\nfunction (month) { return true; }\n\n\nValidate month access before render\n\n\n\n\n\n\ncheckYear\n\n\nfunction\n\n\nfunction (year)  { return true; }\n\n\nValidate year access before render\n\n\n\n\n\n\ntimePicker\n\n\nobject\n\n\n\n\n\n\n\n\n\n\ntimePicker.enabled\n\n\nboolean\n\n\nfalse\n\n\nEnable/Disable timePicker object\n\n\n\n\n\n\ntimePicker.step\n\n\nint\n\n\n1\n\n\nTime section step\n\n\n\n\n\n\ntimePicker.hour\n\n\nobject\n\n\n\n\n\n\n\n\n\n\ntimePicker.hour.enabled\n\n\nboolean\n\n\ntrue\n\n\nEnable/Disable hour in timepPcker object\n\n\n\n\n\n\ntimePicker.hour.step\n\n\nint\n\n\nnull\n\n\nHour section step\n\n\n\n\n\n\ntimePicker.minute\n\n\nobject\n\n\n\n\n\n\n\n\n\n\ntimePicker.minute.enabled\n\n\nboolean\n\n\ntrue\n\n\nEnable/Disable minute in timePicker object\n\n\n\n\n\n\ntimePicker.minute.step\n\n\nint\n\n\nnull\n\n\nMinute section step\n\n\n\n\n\n\ntimePicker.second\n\n\nobject\n\n\n\n\n\n\n\n\n\n\ntimePicker.second.enabled\n\n\nboolean\n\n\ntrue\n\n\nEnable/Disable second in timePicker object\n\n\n\n\n\n\ntimePicker.second.step\n\n\nint\n\n\nnull\n\n\nSecond section step\n\n\n\n\n\n\ntimePicker.meridian\n\n\nobject\n\n\n\n\n\n\n\n\n\n\ntimePicker.meridian.enabled\n\n\nboolean\n\n\ntrue\n\n\nEnable/Disable meridian in timePicker object\n\n\n\n\n\n\ndayPicker\n\n\nobject\n\n\n\n\n\n\n\n\n\n\ndayPicker.enabled\n\n\nboolean\n\n\ntrue\n\n\nEnable/Disable dayPicker object\n\n\n\n\n\n\ndayPicker.titleFormat\n\n\nstring\n\n\n'YYYY MMMM'\n\n\nDayPicker title format string\n\n\n\n\n\n\ndayPicker.titleFormatter\n\n\nfunction\n\n\nfunction (year, month) {}\n\n\nDayPicker title formatter function\n\n\n\n\n\n\ndayPicker.onSelect\n\n\nevent\n\n\nfunction (selectedDayUnix) {}\n\n\nCalled when date select\n\n\n\n\n\n\nmonthPicker\n\n\nobject\n\n\n\n\n\n\n\n\n\n\nmonthPicker.enabled\n\n\nboolean\n\n\ntrue\n\n\nEnable/Disable monthPicker object\n\n\n\n\n\n\nmonthPicker.titleFormat\n\n\nstring\n\n\n'YYYY'\n\n\nMonthPicker title format string\n\n\n\n\n\n\nmonthPicker.titleFormatter\n\n\nfunction\n\n\nfunction (unix) {}\n\n\nMonthPicker title formatter function\n\n\n\n\n\n\nmonthPicker.onSelect\n\n\nevent\n\n\nfunction (monthIndex) {}\n\n\nCalled when month select\n\n\n\n\n\n\nyearPicker\n\n\nobject\n\n\n\n\n\n\n\n\n\n\nyearPicker.enabled\n\n\nboolean\n\n\ntrue\n\n\nEnable/Disable yearPicker object\n\n\n\n\n\n\nyearPicker.titleFormat\n\n\nstring\n\n\n'YYYY'\n\n\nYearPicker title format string\n\n\n\n\n\n\nyearPicker.titleFormatter\n\n\nfunction\n\n\nfunction (year) {}\n\n\nYearPicker title formatter function\n\n\n\n\n\n\nyearPicker.onSelect\n\n\nevent\n\n\nfunction (year) {}\n\n\nCalled when year select\n\n\n\n\n\n\nonSelect\n\n\nevent\n\n\nfunction (unixDate) {}\n\n\nCalled when datePicker select event fire\n\n\n\n\n\n\nonShow\n\n\nevent\n\n\nfunction () {}\n\n\nCalled when datePicker show\n\n\n\n\n\n\nonHide\n\n\nevent\n\n\nfunction () {}\n\n\nCalled when datePicker hide\n\n\n\n\n\n\nonToggle\n\n\nevent\n\n\nfunction () {}\n\n\nCalled when datePicker toggle\n\n\n\n\n\n\nonDestroy\n\n\nevent\n\n\nfunction () {}\n\n\nCalled when datePicker destroy\n\n\n\n\n\n\nautoClose\n\n\nboolean\n\n\nfalse\n\n\nIf true datePicker close after select date\n\n\n\n\n\n\nposition\n\n\nstring\n\n\nauto\n\n\nposition of datepicker element relative to input element, accept auto, [x,y]",
            "title": "Persian Datepicker"
        },
        {
            "location": "/datepicker/#persian-date-picker",
            "text": "Persian Date Picker\nThis Date picker work with Iranian calendar.  Jalali calendar datepicker, which depends on https://github.com/babakhani/PersianDate  More info at  Wikipedia   Documents  Demo",
            "title": "Persian Date Picker"
        },
        {
            "location": "/datepicker/#table-of-content",
            "text": "Dependency  Install  Usage  Options",
            "title": "Table of content:"
        },
        {
            "location": "/datepicker/#dependency",
            "text": "persian date",
            "title": "Dependency"
        },
        {
            "location": "/datepicker/#install",
            "text": "npm install persian-datepicker\nbower install persian-datepicker",
            "title": "Install"
        },
        {
            "location": "/datepicker/#usage",
            "text": "< head > \n   < link   rel = \"stylesheet\"   href = \"css/persian.datepicker.css\" /> \n   < script   src = \"js/jquery.js\" ></ script > \n   < script   src = \"js/persian.date.js\" ></ script > \n   < script   src = \"js/persian.datepicker.js\" ></ script >  </ head >  < script   type = \"text/javascript\" > \n   $ ( document ). ready ( function ()   { \n   $ ( \".example1\" ). pDatepicker (); \n   });  </ script >  < input   type = \"text\"   class = \"example1\"   />",
            "title": "Usage"
        },
        {
            "location": "/datepicker/#options",
            "text": "name  type  default  description      initialValue  boolean  true  If set true datepicker init with input value date    persianDigit  boolean  true  If true all digit shows as persian digit    viewMode  string  'day'  Accept day, motnh, year    format  string  'LLLL'  Default input value formatt string.    formatter  function  function(unixDate){return unixDate}  Format value of input    altField  selector  false  Format value of alt field input    altFieldFormatter  selector  function(unixDate){return unixDate}  Format value of input    minDate  unixDate  null  Format value of input    maxDate  unixDate  null  Format value of input    navigator  object   Navigator object options    navigator.enabled  boolean  true  Make enable/disable navigator    navigator.text  object  true     navigator.text.btnNextText  string  '<'     navigator.text.btnPrevText  string  '>'     navigator.text.onNext  event  function (navigator) {}  Called when navigator goes to next state    navigator.text.onPrev  event  function (navigator) {}  Called when navigator goes to prev state    navigator.text.onSwitch  event  function (state) {}  Called when navigator switch    toolbox  object   Toolbox object options.    toolbox.enabled  boolean  true  Enable/Disable toolbox object    toolbox.text  object      toolbox.text.btnToday  string  '\u0627\u0645\u0631\u0648\u0632'  Today button text    toolbox.onToday  event  function(toolbox){return unixDate}  Event called when today btn clicked    onlyTimePicker (mode)  boolean  false  Must change    onlySelectOnDate  boolean  true  Must change    checkDate  function  function (unix)  { return true; }  Validate date access before render    checkMonth  function  function (month) { return true; }  Validate month access before render    checkYear  function  function (year)  { return true; }  Validate year access before render    timePicker  object      timePicker.enabled  boolean  false  Enable/Disable timePicker object    timePicker.step  int  1  Time section step    timePicker.hour  object      timePicker.hour.enabled  boolean  true  Enable/Disable hour in timepPcker object    timePicker.hour.step  int  null  Hour section step    timePicker.minute  object      timePicker.minute.enabled  boolean  true  Enable/Disable minute in timePicker object    timePicker.minute.step  int  null  Minute section step    timePicker.second  object      timePicker.second.enabled  boolean  true  Enable/Disable second in timePicker object    timePicker.second.step  int  null  Second section step    timePicker.meridian  object      timePicker.meridian.enabled  boolean  true  Enable/Disable meridian in timePicker object    dayPicker  object      dayPicker.enabled  boolean  true  Enable/Disable dayPicker object    dayPicker.titleFormat  string  'YYYY MMMM'  DayPicker title format string    dayPicker.titleFormatter  function  function (year, month) {}  DayPicker title formatter function    dayPicker.onSelect  event  function (selectedDayUnix) {}  Called when date select    monthPicker  object      monthPicker.enabled  boolean  true  Enable/Disable monthPicker object    monthPicker.titleFormat  string  'YYYY'  MonthPicker title format string    monthPicker.titleFormatter  function  function (unix) {}  MonthPicker title formatter function    monthPicker.onSelect  event  function (monthIndex) {}  Called when month select    yearPicker  object      yearPicker.enabled  boolean  true  Enable/Disable yearPicker object    yearPicker.titleFormat  string  'YYYY'  YearPicker title format string    yearPicker.titleFormatter  function  function (year) {}  YearPicker title formatter function    yearPicker.onSelect  event  function (year) {}  Called when year select    onSelect  event  function (unixDate) {}  Called when datePicker select event fire    onShow  event  function () {}  Called when datePicker show    onHide  event  function () {}  Called when datePicker hide    onToggle  event  function () {}  Called when datePicker toggle    onDestroy  event  function () {}  Called when datePicker destroy    autoClose  boolean  false  If true datePicker close after select date    position  string  auto  position of datepicker element relative to input element, accept auto, [x,y]",
            "title": "options"
        },
        {
            "location": "/persian-date/",
            "text": "Persian Date\n\u00b6\n\n\n\n\n\n\nJavascript date library for parsing, validating, manipulating, and formatting persian dates System.\n\n\nInspired by \nmomentjs\n\n\nMore info at \nwikipedia\n\n\nDownload\n\n\nFollow @babakhani\n\n\nStar\n\n\nIssue\n\n\nWatch\n\n\nFork\n\n\nInstall\n\u00b6\n\n\nnpm install persian-date\nbower install persian-date\n\n\n\n\n\nBrowser\n\u00b6\n\n\n<\nscript\n \nsrc\n=\n\"pwt-date.js\"\n></\nscript\n>\n\n\n<\nscript\n>\n\n    \npersianDate\n().\nformat\n();\n\n\n</\nscript\n>\n\n\n\n\n\n\nParse\n\u00b6\n\n\nInstead of modifying the native \nDate.prototype\n , persianDate.js creates a wrapper for the Date object.\nTo get this wrapper object, simply call \npersianDate()\n with one of the supported input types.\n\n\nNow\n\u00b6\n\n\npersianDate\n();\n\n\n\n\n\n\nTo get the current date and time, just call \npersianDate()\n with no parameters.\n\n\nvar\n \nnow\n \n=\n \npersianDate\n();\n\n\n\n\n\n\nThis is essentially the same as calling \npersianDate(new Date())\n .\n\n\nUnix Offset (milliseconds)\n\u00b6\n\n\npersianDate\n(\nNumber\n);\n\n\n\n\n\n\nSimilar to \nnew Date(Number)\n, you can create a persianDate by passing an integer value representing the number of milliseconds since the Unix Epoch (Jan 1 1970 12AM UTC).\n\n\nvar\n \nday\n \n=\n \npersianDate\n(\n1318781876406\n);\n//\"\u06f1\u06f3\u06f9\u06f0-\u06f0\u06f7-\u06f2\u06f4 \u06f1\u06f9:\u06f4\u06f7:\u06f5\u06f6 \u0628 \u0638\"\n\n\n\n\n\n\nUnix Timestamp (seconds)\n\u00b6\n\n\npersianDate\n.\nunix\n(\nNumber\n)\n\n\n\n\n\n\nTo create a persianDate from a Unix timestamp (seconds since the Unix Epoch), use \npersianDate.unix(Number)\n\n\nvar\n \nday\n \n=\n \npersianDate\n.\nunix\n(\n1318781876\n);\n//\"\u06f1\u06f3\u06f9\u06f0-\u06f0\u06f7-\u06f2\u06f4 \u06f1\u06f9:\u06f4\u06f7:\u06f5\u06f6 \u0628 \u0638\"\n\n\n\n\n\n\nThis is implemented as \npersianDate(timestamp * 1000)\n , so partial seconds in the input timestamp are included.\n\n\nvar\n \nday\n \n=\n \npersianDate\n.\nunix\n(\n1318781876.721\n);\n\n\n\n\n\n\nDate\n\u00b6\n\n\npersianDate\n(\nnew\n \nDate\n());\n\n\n\n\n\n\nYou can create a \npersianDate\n with a pre-existing native Javascript \nDate\n object.\n\n\nvar\n \nday\n \n=\n \nnew\n \nDate\n(\n2011\n,\n \n9\n,\n \n16\n);\n\n\nvar\n \ndayWrapper\n \n=\n \npersianDate\n(\nday\n);\n//\"\u06f1\u06f3\u06f9\u06f0-\u06f0\u06f7-\u06f2\u06f4 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638\"\n\n\n\n\n\n\nThis is the fastest way to get a persianDate.js wrapper.\n\n\nArray\n\u00b6\n\n\npersianDate\n([\nNumber\n...]);\n\n\n\n\n\n\nYou can create a persianDate with an array of numbers that mirror the parameters passed to new \nDate()\n But As Persian Date Number Like [1393,2,22,11,22,30]\n\n\n\n\nNote:In this version array of Gregorian Date dose not Support\n\n\n\n\n[\nyear\n,\n \nmonth\n,\n \nday\n,\n \nhour\n,\n \nminute\n,\n \nsecond\n,\n \nmillisecond\n]\n\n\npersianDate\n([\n1393\n,\n \n1\n,\n \n14\n,\n \n15\n,\n25\n,\n \n50\n,\n125\n]);\n \n// \"\u06f1\u06f3\u06f9\u06f3-\u06f0\u06f1-\u06f1\u06f4 \u06f1\u06f5:\u06f2\u06f5:\u06f5\u06f0 \u0628 \u0638\"\n\n\n\n\n\n\nAny value past the year is optional, and will default to the lowest possible number.\n\n\npersianDate\n([\n1392\n]);\n \n// Farvardin 1st\n\n\npersianDate\n([\n1392\n,\n \n6\n]);\n \n// Shahrivar 1st\n\n\npersianDate\n([\n1392\n,\n \n6\n,\n \n10\n]);\n \n// Shahrivar 10th\n\n\n\n\n\n\nPesianDate Clone\n\u00b6\n\n\npersianDate\n(\npersianDate\n);\n\n\n\n\n\n\nAll persianDate are mutable. If you want a clone of a persianDate, you can do so explicitly or implicitly.\nCalling \npersianDate()\n on a persianDate will clone it.\n\n\nvar\n \na\n \n=\n \npersianDate\n([\n1392\n]);\n\n\nvar\n \nb\n \n=\n \npersianDate\n(\na\n);\n\n\na\n.\nyear\n(\n1300\n);\n\n\nb\n.\nyear\n();\n \n// 1392\n\n\n\n\n\n\nvar\n \na\n \n=\n \npersianDate\n([\n1392\n]);\n\n\nvar\n \nb\n \n=\n \na\n.\nclone\n();\n\n\na\n.\nyear\n(\n1300\n);\n\n\nb\n.\nyear\n();\n \n// 1392\n\n\n\n\n\n\nASP.NET JSON Date\n\u00b6\n\n\npersianDate\n(\nString\n);\n\n\n\n\n\n\nASP.NET returns dates in JSON as \n/Date(1198908717056)/\n or \n/Date(1198908717056-0700)/\n\n\nIf a string that matches this format is passed in, it will be parsed correctly.\n\n\npersianDate\n(\n\"/Date(1198908717056-0700)/\"\n);\n \n//\"\u06f1\u06f3\u06f8\u06f6-\u06f1\u06f0-\u06f0\u06f8 \u06f0\u06f9:\u06f4\u06f1:\u06f5\u06f7 \u0642 \u0638\"\n\n\n\n\n\n\nGet + Set\n\u00b6\n\n\npersainDate.js uses overloaded getters and setters. You may be familiar with this pattern from it's use in jQuery.\n\n\nCalling these methods without parameters acts as a getter, and calling them with a parameter acts as a setter.\n\n\nThese map to the corresponding function on the native \nDate\n object.\n\n\npersianDate\n().\nseconds\n(\n30\n)\n \n===\n \nnew\n \nDate\n().\nsetSeconds\n(\n30\n);\n\n\npersianDate\n().\nseconds\n()\n   \n===\n \nnew\n \nDate\n().\ngetSeconds\n();\n\n\n\n\n\n\nMillisecond\n\u00b6\n\n\npersianDate\n().\nmillisecond\n(\nNumber\n);\n\n\npersianDate\n().\nmillisecond\n();\n \n// Number\n\n\npersianDate\n().\nmilliseconds\n(\nNumber\n);\n\n\npersianDate\n().\nmilliseconds\n();\n \n// Number\n\n\n\n\n\n\nGets or sets the milliseconds.\n\n\nAccepts numbers from 0 to 999. If the range is exceeded, it will bubble up to the seconds.\n\n\nSecond\n\u00b6\n\n\npersianDate\n().\nsecond\n(\nNumber\n);\n\n\npersianDate\n().\nsecond\n();\n \n// Number\n\n\npersianDate\n().\nseconds\n(\nNumber\n);\n\n\npersianDate\n().\nseconds\n();\n \n// Number\n\n\n\n\n\n\nGets or sets the seconds.\n\n\nAccepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the minutes.\n\n\nMinute\n\u00b6\n\n\npersianDate\n().\nminute\n(\nNumber\n);\n\n\npersianDate\n().\nminute\n();\n \n// Number\n\n\npersianDate\n().\nminutes\n(\nNumber\n);\n\n\npersianDate\n().\nminutes\n();\n \n// Number\n\n\n\n\n\n\nGets or sets the minutes.\n\n\nAccepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the hours.\n\n\nHour\n\u00b6\n\n\npersianDate\n().\nhour\n(\nNumber\n);\n\n\npersianDate\n().\nhour\n();\n \n// Number\n\n\npersianDate\n().\nhours\n(\nNumber\n);\n\n\npersianDate\n().\nhours\n();\n \n// Number\n\n\n\n\n\n\nGets or sets the hour.\n\n\nAccepts numbers from 0 to 23. If the range is exceeded, it will bubble up to the day.\n\n\nDate of Month\n\u00b6\n\n\npersianDate\n().\ndate\n(\nNumber\n);\n\n\npersianDate\n().\ndate\n();\n \n// Number\n\n\npersianDate\n().\ndates\n(\nNumber\n);\n\n\npersianDate\n().\ndates\n();\n \n// Number\n\n\n\n\n\n\nGets or sets the day of the month.\n\n\nAccepts numbers from 1 to 31. If the range is exceeded, it will bubble up to the months.\n\n\nNote: persianDate#date is for the date of the month, and persianDate#day is for the day of the week.\n\n\nYear\n\u00b6\n\n\npersianDate\n().\nyear\n(\nNumber\n);\n\n\npersianDate\n().\nyear\n();\n \n// Number\n\n\npersianDate\n().\nyears\n(\nNumber\n);\n\n\npersianDate\n().\nyears\n();\n \n// Number\n\n\n\n\n\n\nGets or sets the year.\n\n\nAccepts numbers from -270,000 to 270,000.\n\n\nDay of Week\n\u00b6\n\n\npersianDate\n().\nday\n();\n \n// Number\n\n\npersianDate\n().\ndays\n();\n \n// Number\n\n\n\n\n\n\nGets the day of the week.\n\n\nNote: \npersianDate#date\n is for the date of the month, and \npersianDate#day\n is for the day of the week.\n\n\nManipulate\n\u00b6\n\n\nOnce you have a PersianDate , you may want to manipulate it in some way. There are a number of methods to help with this.\n\n\npersianDate.js uses the \nfluent interface pattern\n,\n also known as \nmethod chaining\n. This allows you to do crazy things like the following.\n\n\npersianDate\n().\nadd\n(\n'days'\n,\n \n7\n).\nsubtract\n(\n'months'\n,\n \n1\n).\nyear\n(\n2009\n).\nhours\n(\n0\n).\nminutes\n(\n0\n).\nseconds\n(\n0\n);\n\n\n\n\n\n\n\n\nNote: It should be noted that persianDates are mutable. Calling any of the manipulation methods will change the original persianDate.\n\n\n\n\nIf you want to create a copy and manipulate it, you should use \npersianDate#clone\n before manipulating the persianDate.\n\n\nAdd\n\u00b6\n\n\npersianDate\n().\nadd\n(\nString\n,\n \nNumber\n);\n\n\n\n\n\n\nMutates the original persianDate by adding time.\n\n\nThis is a pretty robust function for adding time to an existing persianDate. To add time, pass the key of what time you want to add, and the amount you want to add.\n\n\npersianDate\n().\nadd\n(\n'days'\n,\n \n7\n);\n\n\n\n\n\n\nThere are some shorthand keys as well if you're into that whole brevity thing.\n\n\npersianDate\n().\nadd\n(\n'd'\n,\n \n7\n);\n\n\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nAlternate\n\n\nShorthand\n\n\n\n\n\n\n\n\n\n\nyears\n\n\nyear\n\n\ny\n\n\n\n\n\n\nmonths\n\n\nmonth\n\n\nM\n\n\n\n\n\n\nweeks\n\n\nweek\n\n\nw\n\n\n\n\n\n\ndays\n\n\nday\n\n\nd\n\n\n\n\n\n\nhours\n\n\nhour\n\n\nh\n\n\n\n\n\n\nminutes\n\n\nminute\n\n\nm\n\n\n\n\n\n\nseconds\n\n\nsecond\n\n\ns\n\n\n\n\n\n\nmilliseconds\n\n\nmillisecond\n\n\nms\n\n\n\n\n\n\n\n\nIf you want to add multiple different keys at the same time, you can pass them in as an object literal.\n\n\npersianDate\n().\nadd\n(\n'days'\n,\n \n7\n).\nadd\n(\n'months'\n,\n \n1\n);\n \n// with chaining\n\n\n\n\n\n\nThere are no upper limits for the amounts, so you can overload any of the parameters.\n\n\npersianDate\n().\nadd\n(\n'milliseconds'\n,\n \n1000000\n);\n \n// a million milliseconds\n\n\npersianDate\n().\nadd\n(\n'days'\n,\n \n360\n);\n \n// 360 days\n\n\n\n\n\n\nSubtract\n\u00b6\n\n\npersianDate\n().\nsubtract\n(\nString\n,\n \nNumber\n);\n\n\n\n\n\n\nMutates the original persianDate by subtracting time.\n\n\nThis is exactly the same as \npersianDate#add\n , only instead of adding time, it subtracts time.\n\n\npersianDate\n().\nsubtract\n(\n'days'\n,\n \n7\n);\n\n\n\n\n\n\nStart of Time\n\u00b6\n\n\npersianDate\n().\nstartOf\n(\nString\n);\n\n\n\n\n\n\nMutates the original persianDate by setting it to the start of a unit of time.\n\n\npersianDate\n().\nstartOf\n(\n'year'\n);\n   \n// set to Farvardin 1st, 12:00 am this year\n\n\npersianDate\n().\nstartOf\n(\n'month'\n);\n  \n// set to the first of this month, 12:00 am\n\n\npersianDate\n().\nstartOf\n(\n'week'\n);\n   \n// set to the first day of this week, 12:00 am\n\n\npersianDate\n().\nstartOf\n(\n'day'\n);\n    \n// set to 12:00 am today\n\n\npersianDate\n().\nstartOf\n(\n'hour'\n);\n   \n// set to now, but with 0 mins, 0 secs, and 0 ms\n\n\npersianDate\n().\nstartOf\n(\n'minute'\n);\n \n// set to now, but with 0 seconds and 0 milliseconds\n\n\npersianDate\n().\nstartOf\n(\n'second'\n);\n \n// same as persianDate().milliseconds(0);\n\n\n\n\n\n\nThese shortcuts are essentially the same as the following.\n\n\npersianDate\n().\nstartOf\n(\n'year'\n);\n\n\npersianDate\n().\nmonth\n(\n0\n).\ndate\n(\n1\n).\nhours\n(\n0\n).\nminutes\n(\n0\n).\nseconds\n(\n0\n).\nmilliseconds\n(\n0\n);\n\n\n\n\n\n\npersianDate\n().\nstartOf\n(\n'hour'\n);\n\n\npersianDate\n().\nminutes\n(\n0\n).\nseconds\n(\n0\n).\nmilliseconds\n(\n0\n)\n\n\n\n\n\n\nEnd of Time\n\u00b6\n\n\npersianDate\n().\nendOf\n(\nString\n);\n\n\n\n\n\n\nMutates the original persianDate by setting it to the end of a unit of time.\n\n\nThis is the same as \npersianDate#startOf\n , only instead of setting to the start of a unit of time, it sets to the end of a unit of time.\n\n\npersianDate\n().\nendOf\n(\n\"year\"\n);\n \n// set the persianDate to 12-31 11:59:59.999 pm this year\n\n\n\n\n\n\nDisplay\n\u00b6\n\n\nOnce parsing and manipulation are done, you need some way to display the persianDate.\n\n\nFormat\n\u00b6\n\n\npersianDate\n().\nformat\n();\n\n\npersianDate\n().\nformat\n(\nString\n);\n\n\n\n\n\n\nThis is the most robust display option. It takes a string of tokens and replaces them with their corresponding values.\n\n\npersianDate\n().\nformat\n(\n\"dddd, MMMM DD YYYY, h:mm:ss a\"\n);\n \n// \"\u0634\u0646\u0628\u0647, \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a \u06f2\u06f1 \u06f1\u06f3\u06f9\u06f2, \u06f0:\u06f4\u06f2:\u06f4\u06f7 \u0642 \u0638\"\n\n\npersianDate\n().\nformat\n(\n\"dddd, hA\"\n)\n//\"\u0634\u0646\u0628\u0647, \u06f8 \u0642 \u0638\"\n\n\n\n\n\n\nThere are a couple conventions used with the naming of the\n\n\n\n\n\n\n\n\nType\n\n\nTocken\n\n\nOutput\n\n\n\n\n\n\n\n\n\n\nMonth\n\n\nM\n\n\n\u06f1 \u06f2 ... \u06f1\u06f1 \u06f1\u06f2\n\n\n\n\n\n\n\n\nMM\n\n\n\u06f0\u06f1 \u06f0\u06f2 ... \u06f1\u06f1 \u06f1\u06f2\n\n\n\n\n\n\n\n\nMMM\n\n\n\u0641\u0631\u0648 \u0627\u0631\u062f ... \u0627\u0633\u0641\n\n\n\n\n\n\n\n\nMMMM\n\n\n\u0641\u0631\u0648\u0631\u062f\u06cc\u0646 \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a ... \u0627\u0633\u0641\u0646\u062f\n\n\n\n\n\n\nDay of month\n\n\nD\n\n\n\u06f1 \u06f2 ... \u06f3\u06f0 \u06f3\u06f1\n\n\n\n\n\n\n\n\nDD\n\n\n\u06f0\u06f1 \u06f0\u06f2 ... \u06f3\u06f0 \u06f3\u06f1\n\n\n\n\n\n\nDay of year\n\n\nDDD\n\n\n\u06f1 \u06f2 ... \u06f3\u06f6\u06f4 \u06f3\u06f6\u06f5\n\n\n\n\n\n\n\n\nd\n\n\n\u06f0 \u06f1 ... \u06f5 \u06f6\n\n\n\n\n\n\n\n\ndd\n\n\n\u0634 \u06cc ... \u062c\n\n\n\n\n\n\n\n\nddd\n\n\n\u0634\u0646\u0628\u0647 \u06cc\u06a9\u0634\u0646\u0628\u0647 ... \u062c\u0645\u0639\u0647\n\n\n\n\n\n\n\n\ndddd\n\n\n\u0627\u0646\u0627\u0631\u0627\u0645 \u0645\u0627\u0646\u062a\u0631\u0647 \u0633\u067e\u0646\u062f ... \u0627\u0634\u062a\u0627\u062f\n\n\n\n\n\n\nWeek of Year\n\n\nw\n\n\n\u06f1 \u06f2 ... \u06f5\u06f2 \u06f5\u06f3\n\n\n\n\n\n\n\n\nww\n\n\n\u06f0\u06f1 \u06f0\u06f2 ... \u06f5\u06f2 \u06f5\u06f3\n\n\n\n\n\n\nYear\n\n\nYY\n\n\n\u06f6\u06f6 \u06f9\u06f1 ... \u06f9\u06f8 \u06f3\u06f0\n\n\n\n\n\n\n\n\nYYY\n\n\n\u06f1\u06f3\u06f6\u06f6 \u06f1\u06f3\u06f9\u06f1 ... \u06f1\u06f3\u06f9\u06f8 \u06f1\u06f4\u06f0\u06f1\n\n\n\n\n\n\nAM/PM\n\n\na\n\n\n\"\u0642 \u0638\", \"\u0628 \u0638\"\n\n\n\n\n\n\nHour\n\n\nH\n\n\n\u06f0 \u06f1 ... \u06f2\u06f2 \u06f2\u06f3\n\n\n\n\n\n\n\n\nHH\n\n\n\u06f0\u06f0 \u06f0\u06f1 ... \u06f2\u06f2 \u06f2\u06f3\n\n\n\n\n\n\n\n\nh\n\n\n\u06f1 \u06f2 ... \u06f1\u06f1 \u06f1\u06f2\n\n\n\n\n\n\n\n\nhh\n\n\n\u06f0\u06f1 \u06f0\u06f2 ... \u06f1\u06f1 \u06f1\u06f2\n\n\n\n\n\n\nMinute\n\n\nm\n\n\n\u06f0 \u06f1 ... \u06f5\u06f8 \u06f5\u06f9\n\n\n\n\n\n\n\n\nmm\n\n\n\u06f0\u06f0 \u06f0\u06f1 ... \u06f5\u06f8 \u06f5\u06f9\n\n\n\n\n\n\nSecond\n\n\ns\n\n\n\u06f0 \u06f1 ... \u06f5\u06f8 \u06f5\u06f9\n\n\n\n\n\n\n\n\nss\n\n\n\u06f0\u06f0 \u06f0\u06f1 ... \u06f5\u06f8 \u06f5\u06f9\n\n\n\n\n\n\nUnix Timestamp\n\n\nX\n\n\n1360013296\n\n\n\n\n\n\nTimezone\n\n\nZ\n\n\n-\u06f0\u06f4:\u06f3\u06f0 -\u06f0\u06f5:\u06f0\u06f0 ... +\u06f0\u06f4:\u06f3\u06f0 +\u06f0\u06f5:\u06f0\u06f0\n\n\n\n\n\n\n\n\nZZ\n\n\n-\u06f0\u06f4\u06f3\u06f0 -\u06f0\u06f5:\u06f0\u06f0 ... +\u06f0\u06f4:\u06f3\u06f0 +\u06f0\u06f5:\u06f0\u06f0\n\n\n\n\n\n\n\n\nLong Date formats\n\u00b6\n\n\n\n\n\n\n\n\nType\n\n\nTocken\n\n\nOutput\n\n\n\n\n\n\n\n\n\n\nTime\n\n\nLT\n\n\n\"\u06f4:\u06f1\u06f5 \u0628 \u0638\"\n\n\n\n\n\n\nMonth numeral, day of month, year\n\n\nL\n\n\n\u06f1\u06f3\u06f9\u06f2/\u06f0\u06f2/\u06f2\u06f0\n\n\n\n\n\n\n\n\nl\n\n\n\u06f3\u06f9\u06f2/\u06f2/\u06f2\u06f0\n\n\n\n\n\n\nMonth name, day of month, year\n\n\nLL\n\n\n\u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a \u06f2\u06f0 \u06f1\u06f3\u06f9\u06f2\n\n\n\n\n\n\n\n\nll\n\n\n\u0627\u0631\u062f \u06f2\u06f0 \u06f1\u06f3\u06f9\u06f2\n\n\n\n\n\n\nMonth name, day of month, year, time\n\n\nLLL\n\n\n\u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a \u06f1\u06f3\u06f9\u06f2 \u06f2\u06f0 \u06f4:\u06f2\u06f3 \u0628 \u0638\n\n\n\n\n\n\n\n\nlll\n\n\n\u0627\u0631\u062f \u06f1\u06f3\u06f9\u06f2 \u06f2\u06f0 \u06f4:\u06f2\u06f3 \u0628 \u0638\n\n\n\n\n\n\nMonth name, day of month, day of week, year, time\n\n\nLLLL\n\n\n\u062c\u0645\u0639\u0647 \u06f2\u06f0 \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a \u06f1\u06f3\u06f9\u06f2 \u06f4:\u06f2\u06f5 \u0628 \u0638\n\n\n\n\n\n\n\n\nllll\n\n\n\u062c \u06f2\u06f0 \u0627\u0631\u062f \u06f1\u06f3\u06f9\u06f2 \u06f4:\u06f2\u06f7 \u0628 \u0638\n\n\n\n\n\n\n\n\nDefault format\n\u00b6\n\n\nISO8601 format \nYYYY-MM-DDTHH:mm:ssZ\n\n\"\u06f1\u06f3\u06f9\u06f1-\u06f1\u06f0-\u06f0\u06f4 \u06f1\u06f1:\u06f2\u06f7:\u06f5\u06f3 \u0642 \u0638\"\n\n\nFormat To Persian date\n\u00b6\n\n\nBy Default persianDate format, use Persian Number System, for engilsh number Set formatPersian Option as false\n\n\nvar\n \nd\n \n=\n \nnew\n \npersianDate\n([\n1391\n]);\n\n\nd\n.\nformat\n();\n \n//\"\u06f1\u06f3\u06f9\u06f1-\u06f0\u06f1-\u06f0\u06f1 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638\"\n\n\nwindow\n.\nformatPersian\n \n=\n \nfalse\n;\n\n\nd\n.\nformat\n();\n \n//\"1391-01-01 00:00:00 AM\"\n\n\n\n\n\n\nAlso you can set golbal config like this\n\n\nwindow\n.\nformatPersian\n  \n=\n \nfalse\n\n\n\n\n\n\n\n\nNote: After Set Golbal config you can set config for every instance\n\n\n\n\nvar\n \nd\n \n=\n \nnew\n \npersianDate\n([\n1391\n]);\n\n\nd\n.\nformat\n();\n \n//\"\u06f1\u06f3\u06f9\u06f1-\u06f0\u06f1-\u06f0\u06f1 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638\"\n\n\nwindow\n.\nformatPersian\n \n=\n \nfalse\n;\n\n\nd\n.\nformat\n();\n \n//\"1391-01-01 00:00:00 AM\"\n\n\nd\n.\nformatPersian\n \n=\n \ntrue\n;\n\n\nd\n.\nformat\n();\n \n//\"\u06f1\u06f3\u06f9\u06f1-\u06f0\u06f1-\u06f0\u06f1 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638\"\n\n\n\n\n\n\nDifference\n\u00b6\n\n\npersianDate\n().\ndiff\n(\nPersianDate\n|\nString\n|\nBoolean\n);\n\n\npersianDate\n().\ndiff\n(\nPersianDate\n|\nString\n|\nBoolean\n);\n\n\n\n\n\n\nTo get the difference in milliseconds, use \npersianDate#diff\n like you would use \npersianDate#from\n .\n\n\nvar\n \na\n \n=\n \npersianDate\n([\n1392\n,\n \n0\n,\n \n29\n]);\n\n\nvar\n \nb\n \n=\n \npersianDate\n([\n1392\n,\n \n0\n,\n28\n]);\n\n\na\n.\ndiff\n(\nb\n)\n \n// 86400000\n\n\n\n\n\n\nTo get the difference in another unit of measurement, pass that measurement as the second argument.\n\n\nvar\n \na\n \n=\n \npersianDate\n([\n1392\n,\n \n0\n,\n29\n]);\n\n\nvar\n \nb\n \n=\n \npersianDate\n([\n1392\n,\n0\n,\n28\n]);\n\n\na\n.\ndiff\n(\nb\n,\n \n'days'\n)\n// 1\n\n\n\n\n\n\nThe supported measurements are years, months, weeks, days, hours, minutes, and seconds. For ease of development, the singular forms are supported .\n\n\nvar\n \na\n \n=\n \npersianDate\n([\n1391\n,\n \n0\n]);\n\n\nvar\n \nb\n \n=\n \npersianDate\n([\n1392\n,\n \n5\n]);\n\n\na\n.\ndiff\n(\nb\n,\n \n'years'\n)\n       \n// 1\n\n\na\n.\ndiff\n(\nb\n,\n \n'years'\n,\n \ntrue\n)\n \n// 1.5\n\n\n\n\n\n\nIf the persianDate is later than the persianDate you are passing to \npersianDate.fn.diff\n , the return value will be negative.\n\n\nvar\n \na\n \n=\n \npersianDate\n();\n\n\nvar\n \nb\n \n=\n \npersianDate\n().\nadd\n(\n'seconds'\n,\n \n1\n);\n\n\na\n.\ndiff\n(\nb\n)\n \n// -1000\n\n\nb\n.\ndiff\n(\na\n)\n \n// 1000\n\n\n\n\n\n\nA easy way to think of this is by replacing \n.diff(\n with a minus operator.\n\n\n          \n// a < b\n\n\na\n.\ndiff\n(\nb\n)\n \n// a - b < 0\n\n\nb\n.\ndiff\n(\na\n)\n \n// b - a < 0\n\n\n\n\n\n\nUnix Offset (milliseconds)\n\u00b6\n\n\npersianDate\n().\nvalueOf\n();\n\n\n\n\n\n\npersianDate#valueOf\n simply outputs the number of milliseconds since the Unix Epoch, just like \nDate#valueOf\n .\n\n\npersianDate\n(\n1318874398806\n).\nvalueOf\n();\n \n// 1318874398806\n\n\npersianDate\n(\n1318874398806\n);\n \n// \"\u06f1\u06f3\u06f9\u06f0-\u06f0\u06f7-\u06f2\u06f5 \u06f2\u06f1:\u06f2\u06f9:\u06f5\u06f8 \u0628 \u0638\"\n\n\n\n\n\n\nTo get a Unix timestamp (the number of seconds since the epoch) from a \npersianDate\n , use \npersianDate#unix\n .\n\n\nUnix Timestamp (seconds)\n\u00b6\n\n\npersianDate\n().\nunix\n();\n\n\n\n\n\n\npersianDate#unix\n outputs a Unix timestamp (the of seconds since the Unix Epoch).\n\n\npersianDate\n(\n1318874398806\n).\nunix\n();\n \n// 1318874398\n\n\n\n\n\n\nThis value is floored to the nearest second, and does not include a milliseconds component.\n\n\nTimezone Offset\n\u00b6\n\n\npersianDate\n().\nzone\n();\n\n\n\n\n\n\nGet the timezone offset in minutes.\n\n\npersianDate\n().\nzone\n();\n \n// (60, 120, 240, etc.)\n\n\n\n\n\n\nDays in Month\n\u00b6\n\n\npersianDate\n().\ndaysInMonth\n();\n\n\n\n\n\n\nGet the number of days in the current month.\n\n\npersianDate\n([\n1392\n,\n01\n]).\ndaysInMonth\n()\n \n// 29\n\n\npersianDate\n([\n1392\n,\n08\n]).\ndaysInMonth\n()\n \n// 31\n\n\n\n\n\n\nAs Javascript Date\n\u00b6\n\n\npersianDate\n().\ntoDate\n();\n\n\n\n\n\n\nTo get the native \nDate\n object that \npersianDate.js\n wraps, use \npersianDate#toDate\n .\n\n\nThis will return the \nDate\n that the \npersianDate\n uses, so any changes to that \nDate\n will cause the persianDate to change. If you want a Date that is a copy, use \npersianDate#clone\n before you use \npersianDate#toDate\n .\n\n\nAs Array\n\u00b6\n\n\npersianDate\n().\ntoArray\n();\n\n\n\n\n\n\nThis returns an array that mirrors the parameters from new \npersianDate()\n .\n\n\npersianDate\n().\ntoArray\n();\n \n// [1391, 1, 4, 14, 40, 16, 154];\n\n\n\n\n\n\nIs Leap Year\n\u00b6\n\n\npersianDate\n().\nisLeapYear\n();\n\n\n\n\n\n\npersianDate#isLeapYear\n returns true if that year is a leap year, and \nfalse\n if it is not.\n\n\npersianDate\n([\n1391\n]).\nisLeapYear\n()\n \n// true\n\n\npersianDate\n([\n1392\n]).\nisLeapYear\n()\n \n// false\n\n\n\n\n\n\nIs Daylight Saving Time\n\u00b6\n\n\npersianDate\n().\nisDST\n();\n\n\n\n\n\n\npersianDate#isDST\n checks if the current persianDate is in daylight savings time.\n\n\n\n\nNote: \nDaylight saving time in Iran\n\n\n\n\npersianDate\n([\n1392\n,\n \n2\n,\n \n12\n]).\nisDST\n();\n \n// true\n\n\npersianDate\n([\n1392\n,\n \n7\n,\n \n14\n]).\nisDST\n();\n \n// false\n\n\n\n\n\n\nIs a PersainDat\n\u00b6\n\n\npersianDate\n().\nisPersianDate\n(\nobj\n);\n\n\n\n\n\n\nTo check if a variable is a persianDate object, use \npersianDate().isPersianDate()\n .\n\n\npersianDate\n().\nisPersianDate\n()\n \n// false\n\n\npersianDate\n().\nisPersianDate\n(\nnew\n \nDate\n())\n \n// false\n\n\npersianDate\n().\nisPersianDate\n(\npersianDate\n())\n \n// true",
            "title": "Persian Date"
        },
        {
            "location": "/persian-date/#persian-date",
            "text": "Javascript date library for parsing, validating, manipulating, and formatting persian dates System.  Inspired by  momentjs  More info at  wikipedia  Download  Follow @babakhani  Star  Issue  Watch  Fork",
            "title": "Persian Date"
        },
        {
            "location": "/persian-date/#install",
            "text": "npm install persian-date\nbower install persian-date",
            "title": "Install"
        },
        {
            "location": "/persian-date/#browser",
            "text": "< script   src = \"pwt-date.js\" ></ script >  < script > \n     persianDate (). format ();  </ script >",
            "title": "Browser"
        },
        {
            "location": "/persian-date/#parse",
            "text": "Instead of modifying the native  Date.prototype  , persianDate.js creates a wrapper for the Date object.\nTo get this wrapper object, simply call  persianDate()  with one of the supported input types.",
            "title": "Parse"
        },
        {
            "location": "/persian-date/#now",
            "text": "persianDate ();   To get the current date and time, just call  persianDate()  with no parameters.  var   now   =   persianDate ();   This is essentially the same as calling  persianDate(new Date())  .",
            "title": "Now"
        },
        {
            "location": "/persian-date/#unix-offset-milliseconds",
            "text": "persianDate ( Number );   Similar to  new Date(Number) , you can create a persianDate by passing an integer value representing the number of milliseconds since the Unix Epoch (Jan 1 1970 12AM UTC).  var   day   =   persianDate ( 1318781876406 ); //\"\u06f1\u06f3\u06f9\u06f0-\u06f0\u06f7-\u06f2\u06f4 \u06f1\u06f9:\u06f4\u06f7:\u06f5\u06f6 \u0628 \u0638\"",
            "title": "Unix Offset (milliseconds)"
        },
        {
            "location": "/persian-date/#unix-timestamp-seconds",
            "text": "persianDate . unix ( Number )   To create a persianDate from a Unix timestamp (seconds since the Unix Epoch), use  persianDate.unix(Number)  var   day   =   persianDate . unix ( 1318781876 ); //\"\u06f1\u06f3\u06f9\u06f0-\u06f0\u06f7-\u06f2\u06f4 \u06f1\u06f9:\u06f4\u06f7:\u06f5\u06f6 \u0628 \u0638\"   This is implemented as  persianDate(timestamp * 1000)  , so partial seconds in the input timestamp are included.  var   day   =   persianDate . unix ( 1318781876.721 );",
            "title": "Unix Timestamp (seconds)"
        },
        {
            "location": "/persian-date/#date",
            "text": "persianDate ( new   Date ());   You can create a  persianDate  with a pre-existing native Javascript  Date  object.  var   day   =   new   Date ( 2011 ,   9 ,   16 );  var   dayWrapper   =   persianDate ( day ); //\"\u06f1\u06f3\u06f9\u06f0-\u06f0\u06f7-\u06f2\u06f4 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638\"   This is the fastest way to get a persianDate.js wrapper.",
            "title": "Date"
        },
        {
            "location": "/persian-date/#array",
            "text": "persianDate ([ Number ...]);   You can create a persianDate with an array of numbers that mirror the parameters passed to new  Date()  But As Persian Date Number Like [1393,2,22,11,22,30]   Note:In this version array of Gregorian Date dose not Support   [ year ,   month ,   day ,   hour ,   minute ,   second ,   millisecond ]  persianDate ([ 1393 ,   1 ,   14 ,   15 , 25 ,   50 , 125 ]);   // \"\u06f1\u06f3\u06f9\u06f3-\u06f0\u06f1-\u06f1\u06f4 \u06f1\u06f5:\u06f2\u06f5:\u06f5\u06f0 \u0628 \u0638\"   Any value past the year is optional, and will default to the lowest possible number.  persianDate ([ 1392 ]);   // Farvardin 1st  persianDate ([ 1392 ,   6 ]);   // Shahrivar 1st  persianDate ([ 1392 ,   6 ,   10 ]);   // Shahrivar 10th",
            "title": "Array"
        },
        {
            "location": "/persian-date/#pesiandate-clone",
            "text": "persianDate ( persianDate );   All persianDate are mutable. If you want a clone of a persianDate, you can do so explicitly or implicitly.\nCalling  persianDate()  on a persianDate will clone it.  var   a   =   persianDate ([ 1392 ]);  var   b   =   persianDate ( a );  a . year ( 1300 );  b . year ();   // 1392   var   a   =   persianDate ([ 1392 ]);  var   b   =   a . clone ();  a . year ( 1300 );  b . year ();   // 1392",
            "title": "PesianDate Clone"
        },
        {
            "location": "/persian-date/#aspnet-json-date",
            "text": "persianDate ( String );   ASP.NET returns dates in JSON as  /Date(1198908717056)/  or  /Date(1198908717056-0700)/  If a string that matches this format is passed in, it will be parsed correctly.  persianDate ( \"/Date(1198908717056-0700)/\" );   //\"\u06f1\u06f3\u06f8\u06f6-\u06f1\u06f0-\u06f0\u06f8 \u06f0\u06f9:\u06f4\u06f1:\u06f5\u06f7 \u0642 \u0638\"",
            "title": "ASP.NET JSON Date"
        },
        {
            "location": "/persian-date/#get-set",
            "text": "persainDate.js uses overloaded getters and setters. You may be familiar with this pattern from it's use in jQuery.  Calling these methods without parameters acts as a getter, and calling them with a parameter acts as a setter.  These map to the corresponding function on the native  Date  object.  persianDate (). seconds ( 30 )   ===   new   Date (). setSeconds ( 30 );  persianDate (). seconds ()     ===   new   Date (). getSeconds ();",
            "title": "Get + Set"
        },
        {
            "location": "/persian-date/#millisecond",
            "text": "persianDate (). millisecond ( Number );  persianDate (). millisecond ();   // Number  persianDate (). milliseconds ( Number );  persianDate (). milliseconds ();   // Number   Gets or sets the milliseconds.  Accepts numbers from 0 to 999. If the range is exceeded, it will bubble up to the seconds.",
            "title": "Millisecond"
        },
        {
            "location": "/persian-date/#second",
            "text": "persianDate (). second ( Number );  persianDate (). second ();   // Number  persianDate (). seconds ( Number );  persianDate (). seconds ();   // Number   Gets or sets the seconds.  Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the minutes.",
            "title": "Second"
        },
        {
            "location": "/persian-date/#minute",
            "text": "persianDate (). minute ( Number );  persianDate (). minute ();   // Number  persianDate (). minutes ( Number );  persianDate (). minutes ();   // Number   Gets or sets the minutes.  Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the hours.",
            "title": "Minute"
        },
        {
            "location": "/persian-date/#hour",
            "text": "persianDate (). hour ( Number );  persianDate (). hour ();   // Number  persianDate (). hours ( Number );  persianDate (). hours ();   // Number   Gets or sets the hour.  Accepts numbers from 0 to 23. If the range is exceeded, it will bubble up to the day.",
            "title": "Hour"
        },
        {
            "location": "/persian-date/#date-of-month",
            "text": "persianDate (). date ( Number );  persianDate (). date ();   // Number  persianDate (). dates ( Number );  persianDate (). dates ();   // Number   Gets or sets the day of the month.  Accepts numbers from 1 to 31. If the range is exceeded, it will bubble up to the months.  Note: persianDate#date is for the date of the month, and persianDate#day is for the day of the week.",
            "title": "Date of Month"
        },
        {
            "location": "/persian-date/#year",
            "text": "persianDate (). year ( Number );  persianDate (). year ();   // Number  persianDate (). years ( Number );  persianDate (). years ();   // Number   Gets or sets the year.  Accepts numbers from -270,000 to 270,000.",
            "title": "Year"
        },
        {
            "location": "/persian-date/#day-of-week",
            "text": "persianDate (). day ();   // Number  persianDate (). days ();   // Number   Gets the day of the week.  Note:  persianDate#date  is for the date of the month, and  persianDate#day  is for the day of the week.",
            "title": "Day of Week"
        },
        {
            "location": "/persian-date/#manipulate",
            "text": "Once you have a PersianDate , you may want to manipulate it in some way. There are a number of methods to help with this.  persianDate.js uses the  fluent interface pattern ,\n also known as  method chaining . This allows you to do crazy things like the following.  persianDate (). add ( 'days' ,   7 ). subtract ( 'months' ,   1 ). year ( 2009 ). hours ( 0 ). minutes ( 0 ). seconds ( 0 );    Note: It should be noted that persianDates are mutable. Calling any of the manipulation methods will change the original persianDate.   If you want to create a copy and manipulate it, you should use  persianDate#clone  before manipulating the persianDate.",
            "title": "Manipulate"
        },
        {
            "location": "/persian-date/#add",
            "text": "persianDate (). add ( String ,   Number );   Mutates the original persianDate by adding time.  This is a pretty robust function for adding time to an existing persianDate. To add time, pass the key of what time you want to add, and the amount you want to add.  persianDate (). add ( 'days' ,   7 );   There are some shorthand keys as well if you're into that whole brevity thing.  persianDate (). add ( 'd' ,   7 );      Key  Alternate  Shorthand      years  year  y    months  month  M    weeks  week  w    days  day  d    hours  hour  h    minutes  minute  m    seconds  second  s    milliseconds  millisecond  ms     If you want to add multiple different keys at the same time, you can pass them in as an object literal.  persianDate (). add ( 'days' ,   7 ). add ( 'months' ,   1 );   // with chaining   There are no upper limits for the amounts, so you can overload any of the parameters.  persianDate (). add ( 'milliseconds' ,   1000000 );   // a million milliseconds  persianDate (). add ( 'days' ,   360 );   // 360 days",
            "title": "Add"
        },
        {
            "location": "/persian-date/#subtract",
            "text": "persianDate (). subtract ( String ,   Number );   Mutates the original persianDate by subtracting time.  This is exactly the same as  persianDate#add  , only instead of adding time, it subtracts time.  persianDate (). subtract ( 'days' ,   7 );",
            "title": "Subtract"
        },
        {
            "location": "/persian-date/#start-of-time",
            "text": "persianDate (). startOf ( String );   Mutates the original persianDate by setting it to the start of a unit of time.  persianDate (). startOf ( 'year' );     // set to Farvardin 1st, 12:00 am this year  persianDate (). startOf ( 'month' );    // set to the first of this month, 12:00 am  persianDate (). startOf ( 'week' );     // set to the first day of this week, 12:00 am  persianDate (). startOf ( 'day' );      // set to 12:00 am today  persianDate (). startOf ( 'hour' );     // set to now, but with 0 mins, 0 secs, and 0 ms  persianDate (). startOf ( 'minute' );   // set to now, but with 0 seconds and 0 milliseconds  persianDate (). startOf ( 'second' );   // same as persianDate().milliseconds(0);   These shortcuts are essentially the same as the following.  persianDate (). startOf ( 'year' );  persianDate (). month ( 0 ). date ( 1 ). hours ( 0 ). minutes ( 0 ). seconds ( 0 ). milliseconds ( 0 );   persianDate (). startOf ( 'hour' );  persianDate (). minutes ( 0 ). seconds ( 0 ). milliseconds ( 0 )",
            "title": "Start of Time"
        },
        {
            "location": "/persian-date/#end-of-time",
            "text": "persianDate (). endOf ( String );   Mutates the original persianDate by setting it to the end of a unit of time.  This is the same as  persianDate#startOf  , only instead of setting to the start of a unit of time, it sets to the end of a unit of time.  persianDate (). endOf ( \"year\" );   // set the persianDate to 12-31 11:59:59.999 pm this year",
            "title": "End of Time"
        },
        {
            "location": "/persian-date/#display",
            "text": "Once parsing and manipulation are done, you need some way to display the persianDate.",
            "title": "Display"
        },
        {
            "location": "/persian-date/#format",
            "text": "persianDate (). format ();  persianDate (). format ( String );   This is the most robust display option. It takes a string of tokens and replaces them with their corresponding values.  persianDate (). format ( \"dddd, MMMM DD YYYY, h:mm:ss a\" );   // \"\u0634\u0646\u0628\u0647, \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a \u06f2\u06f1 \u06f1\u06f3\u06f9\u06f2, \u06f0:\u06f4\u06f2:\u06f4\u06f7 \u0642 \u0638\"  persianDate (). format ( \"dddd, hA\" ) //\"\u0634\u0646\u0628\u0647, \u06f8 \u0642 \u0638\"   There are a couple conventions used with the naming of the     Type  Tocken  Output      Month  M  \u06f1 \u06f2 ... \u06f1\u06f1 \u06f1\u06f2     MM  \u06f0\u06f1 \u06f0\u06f2 ... \u06f1\u06f1 \u06f1\u06f2     MMM  \u0641\u0631\u0648 \u0627\u0631\u062f ... \u0627\u0633\u0641     MMMM  \u0641\u0631\u0648\u0631\u062f\u06cc\u0646 \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a ... \u0627\u0633\u0641\u0646\u062f    Day of month  D  \u06f1 \u06f2 ... \u06f3\u06f0 \u06f3\u06f1     DD  \u06f0\u06f1 \u06f0\u06f2 ... \u06f3\u06f0 \u06f3\u06f1    Day of year  DDD  \u06f1 \u06f2 ... \u06f3\u06f6\u06f4 \u06f3\u06f6\u06f5     d  \u06f0 \u06f1 ... \u06f5 \u06f6     dd  \u0634 \u06cc ... \u062c     ddd  \u0634\u0646\u0628\u0647 \u06cc\u06a9\u0634\u0646\u0628\u0647 ... \u062c\u0645\u0639\u0647     dddd  \u0627\u0646\u0627\u0631\u0627\u0645 \u0645\u0627\u0646\u062a\u0631\u0647 \u0633\u067e\u0646\u062f ... \u0627\u0634\u062a\u0627\u062f    Week of Year  w  \u06f1 \u06f2 ... \u06f5\u06f2 \u06f5\u06f3     ww  \u06f0\u06f1 \u06f0\u06f2 ... \u06f5\u06f2 \u06f5\u06f3    Year  YY  \u06f6\u06f6 \u06f9\u06f1 ... \u06f9\u06f8 \u06f3\u06f0     YYY  \u06f1\u06f3\u06f6\u06f6 \u06f1\u06f3\u06f9\u06f1 ... \u06f1\u06f3\u06f9\u06f8 \u06f1\u06f4\u06f0\u06f1    AM/PM  a  \"\u0642 \u0638\", \"\u0628 \u0638\"    Hour  H  \u06f0 \u06f1 ... \u06f2\u06f2 \u06f2\u06f3     HH  \u06f0\u06f0 \u06f0\u06f1 ... \u06f2\u06f2 \u06f2\u06f3     h  \u06f1 \u06f2 ... \u06f1\u06f1 \u06f1\u06f2     hh  \u06f0\u06f1 \u06f0\u06f2 ... \u06f1\u06f1 \u06f1\u06f2    Minute  m  \u06f0 \u06f1 ... \u06f5\u06f8 \u06f5\u06f9     mm  \u06f0\u06f0 \u06f0\u06f1 ... \u06f5\u06f8 \u06f5\u06f9    Second  s  \u06f0 \u06f1 ... \u06f5\u06f8 \u06f5\u06f9     ss  \u06f0\u06f0 \u06f0\u06f1 ... \u06f5\u06f8 \u06f5\u06f9    Unix Timestamp  X  1360013296    Timezone  Z  -\u06f0\u06f4:\u06f3\u06f0 -\u06f0\u06f5:\u06f0\u06f0 ... +\u06f0\u06f4:\u06f3\u06f0 +\u06f0\u06f5:\u06f0\u06f0     ZZ  -\u06f0\u06f4\u06f3\u06f0 -\u06f0\u06f5:\u06f0\u06f0 ... +\u06f0\u06f4:\u06f3\u06f0 +\u06f0\u06f5:\u06f0\u06f0",
            "title": "Format"
        },
        {
            "location": "/persian-date/#long-date-formats",
            "text": "Type  Tocken  Output      Time  LT  \"\u06f4:\u06f1\u06f5 \u0628 \u0638\"    Month numeral, day of month, year  L  \u06f1\u06f3\u06f9\u06f2/\u06f0\u06f2/\u06f2\u06f0     l  \u06f3\u06f9\u06f2/\u06f2/\u06f2\u06f0    Month name, day of month, year  LL  \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a \u06f2\u06f0 \u06f1\u06f3\u06f9\u06f2     ll  \u0627\u0631\u062f \u06f2\u06f0 \u06f1\u06f3\u06f9\u06f2    Month name, day of month, year, time  LLL  \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a \u06f1\u06f3\u06f9\u06f2 \u06f2\u06f0 \u06f4:\u06f2\u06f3 \u0628 \u0638     lll  \u0627\u0631\u062f \u06f1\u06f3\u06f9\u06f2 \u06f2\u06f0 \u06f4:\u06f2\u06f3 \u0628 \u0638    Month name, day of month, day of week, year, time  LLLL  \u062c\u0645\u0639\u0647 \u06f2\u06f0 \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a \u06f1\u06f3\u06f9\u06f2 \u06f4:\u06f2\u06f5 \u0628 \u0638     llll  \u062c \u06f2\u06f0 \u0627\u0631\u062f \u06f1\u06f3\u06f9\u06f2 \u06f4:\u06f2\u06f7 \u0628 \u0638",
            "title": "Long Date formats"
        },
        {
            "location": "/persian-date/#default-format",
            "text": "ISO8601 format  YYYY-MM-DDTHH:mm:ssZ \n\"\u06f1\u06f3\u06f9\u06f1-\u06f1\u06f0-\u06f0\u06f4 \u06f1\u06f1:\u06f2\u06f7:\u06f5\u06f3 \u0642 \u0638\"",
            "title": "Default format"
        },
        {
            "location": "/persian-date/#format-to-persian-date",
            "text": "By Default persianDate format, use Persian Number System, for engilsh number Set formatPersian Option as false  var   d   =   new   persianDate ([ 1391 ]);  d . format ();   //\"\u06f1\u06f3\u06f9\u06f1-\u06f0\u06f1-\u06f0\u06f1 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638\"  window . formatPersian   =   false ;  d . format ();   //\"1391-01-01 00:00:00 AM\"   Also you can set golbal config like this  window . formatPersian    =   false    Note: After Set Golbal config you can set config for every instance   var   d   =   new   persianDate ([ 1391 ]);  d . format ();   //\"\u06f1\u06f3\u06f9\u06f1-\u06f0\u06f1-\u06f0\u06f1 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638\"  window . formatPersian   =   false ;  d . format ();   //\"1391-01-01 00:00:00 AM\"  d . formatPersian   =   true ;  d . format ();   //\"\u06f1\u06f3\u06f9\u06f1-\u06f0\u06f1-\u06f0\u06f1 \u06f0\u06f0:\u06f0\u06f0:\u06f0\u06f0 \u0642 \u0638\"",
            "title": "Format To Persian date"
        },
        {
            "location": "/persian-date/#difference",
            "text": "persianDate (). diff ( PersianDate | String | Boolean );  persianDate (). diff ( PersianDate | String | Boolean );   To get the difference in milliseconds, use  persianDate#diff  like you would use  persianDate#from  .  var   a   =   persianDate ([ 1392 ,   0 ,   29 ]);  var   b   =   persianDate ([ 1392 ,   0 , 28 ]);  a . diff ( b )   // 86400000   To get the difference in another unit of measurement, pass that measurement as the second argument.  var   a   =   persianDate ([ 1392 ,   0 , 29 ]);  var   b   =   persianDate ([ 1392 , 0 , 28 ]);  a . diff ( b ,   'days' ) // 1   The supported measurements are years, months, weeks, days, hours, minutes, and seconds. For ease of development, the singular forms are supported .  var   a   =   persianDate ([ 1391 ,   0 ]);  var   b   =   persianDate ([ 1392 ,   5 ]);  a . diff ( b ,   'years' )         // 1  a . diff ( b ,   'years' ,   true )   // 1.5   If the persianDate is later than the persianDate you are passing to  persianDate.fn.diff  , the return value will be negative.  var   a   =   persianDate ();  var   b   =   persianDate (). add ( 'seconds' ,   1 );  a . diff ( b )   // -1000  b . diff ( a )   // 1000   A easy way to think of this is by replacing  .diff(  with a minus operator.             // a < b  a . diff ( b )   // a - b < 0  b . diff ( a )   // b - a < 0",
            "title": "Difference"
        },
        {
            "location": "/persian-date/#unix-offset-milliseconds_1",
            "text": "persianDate (). valueOf ();   persianDate#valueOf  simply outputs the number of milliseconds since the Unix Epoch, just like  Date#valueOf  .  persianDate ( 1318874398806 ). valueOf ();   // 1318874398806  persianDate ( 1318874398806 );   // \"\u06f1\u06f3\u06f9\u06f0-\u06f0\u06f7-\u06f2\u06f5 \u06f2\u06f1:\u06f2\u06f9:\u06f5\u06f8 \u0628 \u0638\"   To get a Unix timestamp (the number of seconds since the epoch) from a  persianDate  , use  persianDate#unix  .",
            "title": "Unix Offset (milliseconds)"
        },
        {
            "location": "/persian-date/#unix-timestamp-seconds_1",
            "text": "persianDate (). unix ();   persianDate#unix  outputs a Unix timestamp (the of seconds since the Unix Epoch).  persianDate ( 1318874398806 ). unix ();   // 1318874398   This value is floored to the nearest second, and does not include a milliseconds component.",
            "title": "Unix Timestamp (seconds)"
        },
        {
            "location": "/persian-date/#timezone-offset",
            "text": "persianDate (). zone ();   Get the timezone offset in minutes.  persianDate (). zone ();   // (60, 120, 240, etc.)",
            "title": "Timezone Offset"
        },
        {
            "location": "/persian-date/#days-in-month",
            "text": "persianDate (). daysInMonth ();   Get the number of days in the current month.  persianDate ([ 1392 , 01 ]). daysInMonth ()   // 29  persianDate ([ 1392 , 08 ]). daysInMonth ()   // 31",
            "title": "Days in Month"
        },
        {
            "location": "/persian-date/#as-javascript-date",
            "text": "persianDate (). toDate ();   To get the native  Date  object that  persianDate.js  wraps, use  persianDate#toDate  .  This will return the  Date  that the  persianDate  uses, so any changes to that  Date  will cause the persianDate to change. If you want a Date that is a copy, use  persianDate#clone  before you use  persianDate#toDate  .",
            "title": "As Javascript Date"
        },
        {
            "location": "/persian-date/#as-array",
            "text": "persianDate (). toArray ();   This returns an array that mirrors the parameters from new  persianDate()  .  persianDate (). toArray ();   // [1391, 1, 4, 14, 40, 16, 154];",
            "title": "As Array"
        },
        {
            "location": "/persian-date/#is-leap-year",
            "text": "persianDate (). isLeapYear ();   persianDate#isLeapYear  returns true if that year is a leap year, and  false  if it is not.  persianDate ([ 1391 ]). isLeapYear ()   // true  persianDate ([ 1392 ]). isLeapYear ()   // false",
            "title": "Is Leap Year"
        },
        {
            "location": "/persian-date/#is-daylight-saving-time",
            "text": "persianDate (). isDST ();   persianDate#isDST  checks if the current persianDate is in daylight savings time.   Note:  Daylight saving time in Iran   persianDate ([ 1392 ,   2 ,   12 ]). isDST ();   // true  persianDate ([ 1392 ,   7 ,   14 ]). isDST ();   // false",
            "title": "Is Daylight Saving Time"
        },
        {
            "location": "/persian-date/#is-a-persaindat",
            "text": "persianDate (). isPersianDate ( obj );   To check if a variable is a persianDate object, use  persianDate().isPersianDate()  .  persianDate (). isPersianDate ()   // false  persianDate (). isPersianDate ( new   Date ())   // false  persianDate (). isPersianDate ( persianDate ())   // true",
            "title": "Is a PersainDat"
        },
        {
            "location": "/test/",
            "text": "Persian Web Toolkit\n\u00b6\n\n\n- wdasd\n- dfasdasd\n- dasdsadasdas\n\n\n\n\n\nhead1\n\u00b6\n\n\nhead2\n\u00b6\n\n\nhead3\n\u00b6\n\n\nhead4\n\u00b6\n\n\ndsahdasudyasgudgasuydgasuydgasugdasd\ndhasiudygasuydgasugduyasgddaskjdhagshjd\n\n\ndsajdasvhdgvahsgvdhgasd\ndasbjdhbvasjhdvasdasdsa\n\n\ngooogle",
            "title": "Test"
        },
        {
            "location": "/test/#persian-web-toolkit",
            "text": "- wdasd\n- dfasdasd\n- dasdsadasdas",
            "title": "Persian Web Toolkit"
        },
        {
            "location": "/test/#head1",
            "text": "",
            "title": "head1"
        },
        {
            "location": "/test/#head2",
            "text": "",
            "title": "head2"
        },
        {
            "location": "/test/#head3",
            "text": "",
            "title": "head3"
        },
        {
            "location": "/test/#head4",
            "text": "dsahdasudyasgudgasuydgasuydgasugdasd\ndhasiudygasuydgasugduyasgddaskjdhagshjd  dsajdasvhdgvahsgvdhgasd\ndasbjdhbvasjhdvasdasdsa  gooogle",
            "title": "head4"
        }
    ]
}